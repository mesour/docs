Práce s floaty
**************

.[perex]
[api:Nette\Utils\Floats] je statická třída s užitečnými funkcemi pro porovnávání floatů.


Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Floats;
```



Motivace
========

Říkáte si, proč vlastně třída na porovnávání floatů? Vždyť můžu použít operátory `<`, `>`, `===` a mám vystaráno.
Opak je ale pravdou. Co myslíte, že vypíše tento kód?

```php
$a = 0.1 + 0.2; // 0.3
$b = 0.3;
echo $a === $b ? 'are same' : 'are not same';
```

Pokud si kód skutečně spustíte, část z vás bude určitě překvapená, že program vypsal `are not same`.

Takže pokud je `$a` vypočtená a `$b` je přesně 0.3, může se stát, že jsou různé, i když obě proměnné zobrazují při vypsání
stejnou hodnotu. Je to dáno kromě jiného převodem mezi soustavami (desítková, binární a opačně).

Pro porovnání tedy musíte použít nejmenší přijatelný rozdíl, například `abs($a - $b) < 0.0000001`. Těmito detaily se
ale zabývat nemusíte, protože zde máte k dispozici třídu [api:Nette\Utils\Floats], která tento problém řeší. Následující
kód už bude fungovat podle očekávání.

```php
$a = 0.1 + 0.2; // 0.3
$b = 0.3;
echo Floats::areEqual($a, $b) ? 'are same' : 'are not same'; // are same
```




Porovnávání floatů
======================

Při pokusu porovnávat `NAN` vyhodí výjimku `\LogicException`.

areEqual(float $a, float $b): bool .[method]
-------------------------------------------

Vrátí true pokud `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
---------------------------------------------

Vrátí true pokud platí `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
--------------------------------------------------------

Vrátí true pokud platí `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2); // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
---------------------------------------------

Vrátí true pokud platí `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2); // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
---------------------------------------------

Vrátí true pokud platí `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2); // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```



Řazení pole podle hodnoty floatů
========================

compare(float $a, float $b): int .[method]
-----------------------------------------

Pokud jsou `$a` < `$b`, vrací `-1`, pokud se rovnají vrací `0` a pokud je `$a` > `$b` vrací `1`. Ideální použití je
například s funkcí `uasort`.Při pokusu porovnávat `NAN` vyhodí výjimku `\LogicException`.

```php
$arr = [1, 5, 2, -3.5];
uasort($arr, function (float $a, float $b): int {
	return Floats::compare($a, $b);
});
// $arr je nyní [-3.5, 1, 2, 5]
```



Pomocné funkce
============

isZero(float $value): bool .[method]
------------------------------------

Vrátí true, pokud je hodnota rovna nule.

```php
Floats::isZero(0.0); // true
Floats::isZero(0); // true
```


isInteger(float $value): bool .[method]
------------------------------------

Vrátí true, pokud je hodnota celé číslo.

```php
Floats::isInteger(0); // true
Floats::isInteger(0.0); // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF); // false
Floats::isInteger(NAN); // false
```


{{composer: nette/utils}}